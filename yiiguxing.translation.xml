<application>
  <component name="AppStorage">
    <histories>
      <item value="set Type Order" />
      <item value="knowledge Base Manager" />
      <item value="重新" />
      <item value="renew Add" />
      <item value="renew Add Department For Error Data" />
      <item value="重试插入人员数据失败" />
      <item value="重试插入失败" />
      <item value="Clause" />
      <item value="set Order By Clause" />
      <item value="置顶" />
      <item value="topping" />
      <item value="取消置顶" />
      <item value="special" />
      <item value="specialapplication" />
      <item value="will not be managed by Spring" />
      <item value="簇" />
      <item value="cluster" />
      <item value="instance must be started before calling this method" />
      <item value="BROADCASTING" />
      <item value="CLUSTERING" />
      <item value="seal" />
      <item value="is Has Account" />
      <item value="link Man 1" />
      <item value="company Stand Code" />
      <item value="company Name" />
      <item value="company Code" />
      <item value="owner Share Rate" />
      <item value="briefintro" />
      <item value="is Seal" />
      <item value="is Working Unit" />
      <item value="legal Person" />
      <item value="change Type" />
      <item value="company" />
      <item value="dubbo-cluster" />
      <item value="子节点" />
      <item value="归档合同" />
      <item value="Support a current transaction, create a new one if none exists. Analogous to EJB transaction attribute of the same name. This is the default setting of a transaction annotation." />
      <item value="Support a current transaction, create a new one if none exists. Analogous to EJB transaction attribute of the same name.&#10;This is the default setting of a transaction annotation." />
      <item value="Support a current transaction, execute non-transactionally if none exists. Analogous to EJB transaction attribute of the same name. Note: For transaction managers with transaction synchronization, PROPAGATION_SUPPORTS is slightly different from no transaction at all, as it defines a transaction scope that synchronization will apply for. As a consequence, the same resources (JDBC Connection, Hibernate Session, etc) will be shared for the entire specified scope. Note that this depends on the actual synchronization configuration of the transaction manager." />
      <item value="Support a current transaction, execute non-transactionally if none exists. Analogous to EJB transaction attribute of the same name.&#10;Note: For transaction managers with transaction synchronization, PROPAGATION_SUPPORTS is slightly different from no transaction at all, as it defines a transaction scope that synchronization will apply for. As a consequence, the same resources (JDBC Connection, Hibernate Session, etc) will be shared for the entire specified scope. Note that this depends on the actual synchronization configuration of the transaction manager." />
      <item value="Indicates one or more @Configuration classes to import. Provides functionality equivalent to the &lt;import/&gt; element in Spring XML. Allows for importing @Configuration classes, ImportSelector and ImportBeanDefinitionRegistrar implementations, as well as regular component classes (as of 4.2; analogous to AnnotationConfigApplicationContext.register). @Bean definitions declared in imported @Configuration classes should be accessed by using @Autowired injection. Either the bean itself can be autowired, or the configuration class instance declaring the bean can be autowired. The latter approach allows for explicit, IDE-friendly navigation between @Configuration class methods. May be declared at the class level or as a meta-annotation. If XML or other non-@Configuration bean definition resources need to be imported, use the @ImportResource annotation instead" />
      <item value="Indicates one or more @Configuration classes to import.&#10;Provides functionality equivalent to the &lt;import/&gt; element in Spring XML. Allows for importing @Configuration classes, ImportSelector and ImportBeanDefinitionRegistrar implementations, as well as regular component classes (as of 4.2; analogous to AnnotationConfigApplicationContext.register).&#10;@Bean definitions declared in imported @Configuration classes should be accessed by using @Autowired injection. Either the bean itself can be autowired, or the configuration class instance declaring the bean can be autowired. The latter approach allows for explicit, IDE-friendly navigation between @Configuration class methods.&#10;May be declared at the class level or as a meta-annotation.&#10;If XML or other non-@Configuration bean definition resources need to be imported, use the @ImportResource annotation instead" />
      <item value="Beams" />
      <item value="Indicates one or more @Configuration classes to import. Provides functionality equivalent to the &lt;import/&gt; element in Spring XML. Allows for importing @Configuration classes, ImportSelector and ImportBeanDefinitionRegistrar implementations, as well as regular component classes (as of 4.2; analogous to AnnotationConfigApplicationContext.register). @Bean definitions declared in imported @Configuration classes should be accessed by using @Autowired injection. Either the bean itself can be autowired, or the configuration class instance declaring the bean can be autowired. The latter approach allows for explicit, IDE-friendly navigation between @Configuration class methods. May be declared at the class level or as a meta-annotation. If XML or other non-@Configuration bean definition resources need to be imported, use the @ImportResource annotation instead." />
      <item value="Indicates one or more @Configuration classes to import.&#10;Provides functionality equivalent to the &lt;import/&gt; element in Spring XML. Allows for importing @Configuration classes, ImportSelector and ImportBeanDefinitionRegistrar implementations, as well as regular component classes (as of 4.2; analogous to AnnotationConfigApplicationContext.register).&#10;@Bean definitions declared in imported @Configuration classes should be accessed by using @Autowired injection. Either the bean itself can be autowired, or the configuration class instance declaring the bean can be autowired. The latter approach allows for explicit, IDE-friendly navigation between @Configuration class methods.&#10;May be declared at the class level or as a meta-annotation.&#10;If XML or other non-@Configuration bean definition resources need to be imported, use the @ImportResource annotation instead." />
      <item value="terms Information" />
      <item value="is not visible from class loader" />
      <item value="function main is undeclared in the main package" />
      <item value="java.lang.IllegalArgumentException: interface com.deppon.module.api.TransferServiceI is not visible from class loader" />
      <item value="expected" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="344" />
        <entry key="ENGLISH" value="345" />
        <entry key="ESTONIAN" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="FRENCH" value="2" />
        <entry key="FRISIAN" value="1" />
        <entry key="GUJARATI" value="1" />
        <entry key="CZECH" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="GREEK" value="1" />
        <entry key="ITALIAN" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="ignoreRegExp" value="" />
  </component>
</application>