<application>
  <component name="AppStorage">
    <histories>
      <item value="early" />
      <item value="early Application Events" />
      <item value="修复 bug" />
      <item value="Fix bug" />
      <item value="bug Fix" />
      <item value="bug fixd" />
      <item value="fixd bug" />
      <item value="fix bug" />
      <item value="outlay" />
      <item value="支出" />
      <item value="total Consume" />
      <item value="MILLISECONDS" />
      <item value="ge" />
      <item value="week Day" />
      <item value="FRIDAY" />
      <item value="crypto" />
      <item value="Msic Http Request Interceptor" />
      <item value="max Body Size" />
      <item value="compute If Absent" />
      <item value="Client network socket disconnected before secure TLS connection was established" />
      <item value="user Point" />
      <item value="userPoint" />
      <item value="user Profile" />
      <item value="dashboard" />
      <item value="首页" />
      <item value="followeds" />
      <item value="follows" />
      <item value="followed" />
      <item value="mutual" />
      <item value="authstatus" />
      <item value="authority" />
      <item value="artist Name" />
      <item value="follow Me" />
      <item value="follow Time" />
      <item value="artist Id" />
      <item value="blacklist" />
      <item value="expert Tags" />
      <item value="account Status" />
      <item value="auth Status" />
      <item value="artist Identity" />
      <item value="Main Auth Type" />
      <item value="All Auth Types" />
      <item value="before" />
      <item value="proxy Parame" />
      <item value="parame" />
      <item value="param" />
      <item value="Pamram" />
      <item value="proxy Pamram" />
      <item value="Porxy" />
      <item value="String collect = songIds.stream().map(String::valueOf).collect(Collectors.joining(&quot;,&quot;)); JSONObject obj = restTemplate.getForEntity(&quot;song/url?id={1}&quot;, JSONObject.class, collect).getBody(); Assert.notNull(obj, &quot;get song url response body is null&quot;); if (Objects.equals(obj.getInteger(Constant.NODEAPI_CODE_KEY), Constant.NODEAPI_SUCCESS_CODE)) { List&lt;Map&gt; data = obj.getJSONArray(&quot;data&quot;).toJavaList(Map.class); if (!CollectionUtils.isEmpty(data)) { List&lt;Pair&lt;Long, String&gt;&gt; songUrls = new ArrayList&lt;&gt;(); data.forEach(o -&gt; { Long id = Long.valueOf((Integer) o.get(&quot;id&quot;)); String url = (String) o.get(&quot;url&quot;); songUrls.add(Pair.of(id, url)); }); return songUrls; } }" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="405" />
        <entry key="ENGLISH" value="407" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="ARABIC" value="1" />
        <entry key="ESTONIAN" value="2" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="5" />
        <entry key="FILIPINO" value="2" />
        <entry key="FINNISH" value="1" />
        <entry key="GUJARATI" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="KANNADA" value="1" />
        <entry key="CROATIAN" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="LATVIAN" value="1" />
        <entry key="ROMANIAN" value="1" />
        <entry key="NORWEGIAN" value="1" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="SESOTHO" value="4" />
        <entry key="SUNDANESE" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="JAVANESE" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="useTranslateGoogleCom" value="false" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
  </component>
</application>