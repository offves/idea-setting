<application>
  <component name="AppStorage">
    <histories>
      <item value="开通课程" />
      <item value="open Course" />
      <item value="Effective" />
      <item value="有效日期" />
      <item value="private final UserAuthService userAuthService; private final TrainClassService trainClassService; private final UserCourseService userCourseService; @Override public IPage&lt;OrderVO&gt; getOrderByPage(Page&lt;Order&gt; page, Long userId, Long classId) { LambdaQueryWrapper&lt;Order&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;(); if (userId != null) { queryWrapper.eq(Order::getUserId, userId); } if (classId != null) { queryWrapper.eq(Order::getClassId, classId); } IPage&lt;Order&gt; orderPage = super.page(page, queryWrapper); if (CollectionUtils.isEmpty(orderPage.getRecords())) { return new Page&lt;&gt;(page.getCurrent(), page.getSize(), 0); } Set&lt;Long&gt; userIds = page.getRecords().stream().map(Order::getUserId).collect(Collectors.toSet()); Set&lt;Long&gt; classIds = page.getRecords().stream().map(Order::getClassId).collect(Collectors.toSet()); Map&lt;Long, String&gt; userAuthDict = userAuthService.findUserAuthDictByIds(userIds, UserAuth::getUsername); Map&lt;Long, String&gt; trainClassNameDict = trainClassService.findTrainClassDictByIds(classIds, TrainClass::getName); return orderPage.convert(order -&gt; new OrderVO(order, userAuthDict.getOrDefault(order.getUserId(), String.valueOf(order.getUserId())), trainClassNameDict.getOrDefault(order.getClassId(), String.valueOf(order.getClassId())))); } @Override @Transactional public Long addOrder(OrderAO orderAO) { Order order = new Order(); BeanUtils.copyProperties(orderAO, order); order.setStatus(EnumsUtils.getEnumObject(OrderStatus.class, p -&gt; p.ordinal() == orderAO.getStatus()).orElseThrow(() -&gt; new BusinessException(&quot;订单状态值错误&quot;))); order.setPaymentMethod(EnumsUtils.getEnumObject(PayType.class, p -&gt; p.ordinal() == orderAO.getPaymentMethod()).orElseThrow(() -&gt; new BusinessException(&quot;订单支付方式值错误&quot;))); order.setOrderNumber(IdGenerator.nextIdStr()); if (order.getStatus() == OrderStatus.WAIT_FOR_PAY) { order.setPaymentTime(null); } super.save(order); userCourseService.addCourseFor(order.getUserId(), order.getClassId()); return order.getId(); }" />
      <item value="active" />
      <item value="worker Id can't be greater than 31 or less than 0" />
      <item value="Pay Type" />
      <item value="Service Impl" />
      <item value="Application Filter Chain" />
      <item value="childs" />
      <item value="Base Entity" />
      <item value="Note the order is from least to most specific (last one wins)" />
      <item value="INFO" />
      <item value="Post Mapping" />
      <item value="活动" />
      <item value="认证" />
      <item value="课程" />
      <item value="Course Section Mapper" />
      <item value="DEBUG" />
      <item value="studying" />
      <item value="studyed" />
      <item value="study" />
      <item value="学习" />
      <item value="note" />
      <item value="course note" />
      <item value="private" />
      <item value="privite" />
      <item value="priviter" />
      <item value="笔记" />
      <item value="replies" />
      <item value="replys" />
      <item value="回复" />
      <item value="childrens" />
      <item value="engine" />
      <item value="unknow" />
      <item value="验证签名不通过" />
      <item value="Wx Pay Order Notify Result" />
      <item value="订单支付金额不一致" />
      <item value="支付金额不一致" />
      <item value="could not found order by order_number" />
      <item value="out Trade No" />
      <item value="值" />
      <item value="valus" />
      <item value="the msg" />
      <item value="msg" />
      <item value="the selected converter type" />
      <item value="type" />
      <item value="Whether this component supports the given controller method return type * and the selected {@code HttpMessageConverter} type." />
      <item value="介绍" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="540" />
        <entry key="ENGLISH" value="540" />
        <entry key="CHINESE_TRADITIONAL" value="1" />
        <entry key="ARABIC" value="1" />
        <entry key="ESTONIAN" value="3" />
        <entry key="AFRIKAANS" value="1" />
        <entry key="DANISH" value="2" />
        <entry key="GERMAN" value="1" />
        <entry key="RUSSIAN" value="1" />
        <entry key="FRENCH" value="5" />
        <entry key="FILIPINO" value="2" />
        <entry key="FINNISH" value="1" />
        <entry key="GUJARATI" value="1" />
        <entry key="DUTCH" value="1" />
        <entry key="KANNADA" value="1" />
        <entry key="CROATIAN" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="LATVIAN" value="1" />
        <entry key="LITHUANIAN" value="1" />
        <entry key="ROMANIAN" value="3" />
        <entry key="NORWEGIAN" value="2" />
        <entry key="PORTUGUESE" value="1" />
        <entry key="JAPANESE" value="2" />
        <entry key="SESOTHO" value="4" />
        <entry key="ITALIAN" value="1" />
        <entry key="SUNDANESE" value="1" />
        <entry key="INDONESIAN" value="1" />
        <entry key="JAVANESE" value="1" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="CHINESE" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
  </component>
</application>